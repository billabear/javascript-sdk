/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.56
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/BillaBear/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/BillaBear/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillaBear);
  }
}(this, function(expect, BillaBear) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillaBear.PaymentsApi();
  });

  describe('BillaBear', function() {
    describe('PaymentsApi', function() {
      describe('chargeInvoice', function() {
        it('should call chargeInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for chargeInvoice call and complete the assertions
          /*

          instance.chargeInvoice(invoiceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillaBear.InlineResponse20012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadInvoice', function() {
        it('should call downloadInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadInvoice call and complete the assertions
          /*

          instance.downloadInvoice(invoiceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadReceipt', function() {
        it('should call downloadReceipt successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadReceipt call and complete the assertions
          /*

          instance.downloadReceipt(receipt, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoicesForCustomer', function() {
        it('should call getInvoicesForCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoicesForCustomer call and complete the assertions
          /*

          instance.getInvoicesForCustomer(customerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillaBear.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPaymentsForCustomer', function() {
        it('should call getPaymentsForCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for getPaymentsForCustomer call and complete the assertions
          /*
          var opts = {};

          instance.getPaymentsForCustomer(customerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillaBear.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPayment', function() {
        it('should call listPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for listPayment call and complete the assertions
          /*
          var opts = {};

          instance.listPayment(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BillaBear.InlineResponse2007);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refundPayment', function() {
        it('should call refundPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for refundPayment call and complete the assertions
          /*

          instance.refundPayment(body, paymentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
