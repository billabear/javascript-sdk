/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.56
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/BillaBear/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/BillaBear/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillaBear);
  }
}(this, function(expect, BillaBear) {
  'use strict';

  var instance;

  describe('BillaBear', function() {
    describe('Customer', function() {
      beforeEach(function() {
        instance = new BillaBear.Customer();
      });

      it('should create an instance of Customer', function() {
        // TODO: update the code to test Customer
        expect(instance).to.be.a(BillaBear.Customer);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property taxNumber (base name: "tax_number")', function() {
        // TODO: update the code to test the property taxNumber
        expect(instance).to.have.property('taxNumber');
        // expect(instance.taxNumber).to.be(expectedValueLiteral);
      });

      it('should have the property standardTaxRate (base name: "standard_tax_rate")', function() {
        // TODO: update the code to test the property standardTaxRate
        expect(instance).to.have.property('standardTaxRate');
        // expect(instance.standardTaxRate).to.be(expectedValueLiteral);
      });

      it('should have the property digitalTaxRate (base name: "digital_tax_rate")', function() {
        // TODO: update the code to test the property digitalTaxRate
        expect(instance).to.have.property('digitalTaxRate');
        // expect(instance.digitalTaxRate).to.be(expectedValueLiteral);
      });

      it('should have the property billingType (base name: "billing_type")', function() {
        // TODO: update the code to test the property billingType
        expect(instance).to.have.property('billingType');
        // expect(instance.billingType).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property externalReference (base name: "external_reference")', function() {
        // TODO: update the code to test the property externalReference
        expect(instance).to.have.property('externalReference');
        // expect(instance.externalReference).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property locale (base name: "locale")', function() {
        // TODO: update the code to test the property locale
        expect(instance).to.have.property('locale');
        // expect(instance.locale).to.be(expectedValueLiteral);
      });

      it('should have the property brand (base name: "brand")', function() {
        // TODO: update the code to test the property brand
        expect(instance).to.have.property('brand');
        // expect(instance.brand).to.be(expectedValueLiteral);
      });

    });
  });

}));
