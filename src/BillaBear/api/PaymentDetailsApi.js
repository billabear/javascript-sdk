/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.56
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FrontendToken from '../model/FrontendToken';
import InlineResponse2005 from '../model/InlineResponse2005';
import PaymentDetails from '../model/PaymentDetails';

/**
* PaymentDetails service.
* @module BillaBear/api/PaymentDetailsApi
* @version 1.0.0
*/
export default class PaymentDetailsApi {

    /**
    * Constructs a new PaymentDetailsApi. 
    * @alias module:BillaBear/api/PaymentDetailsApi
    * @class
    * @param {module:BillaBear/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BillaBear/ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the completeFrontendPaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~completeFrontendPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/PaymentDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Frontend Detail Collection
     * Complete frontend payment details
     * @param {module:BillaBear/model/FrontendToken} body 
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/PaymentDetailsApi~completeFrontendPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    completeFrontendPaymentDetails(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling completeFrontendPaymentDetails");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling completeFrontendPaymentDetails");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentDetails;

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods/frontend-payment-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~deletePaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete Payment Details
     * @param {String} paymentDetailsId The id of the payment details
     * @param {module:BillaBear/api/PaymentDetailsApi~deletePaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePaymentDetails(paymentDetailsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling deletePaymentDetails");
      }

      let pathParams = {
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/payment-methods/{paymentDetailsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePaymentDetailsCustomer operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~deletePaymentDetailsCustomerCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete With Customer
     * Delete Payment Details
     * @param {String} customerId The id of the customer to retrieve
     * @param {String} paymentDetailsId The id of the payment details
     * @param {module:BillaBear/api/PaymentDetailsApi~deletePaymentDetailsCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePaymentDetailsCustomer(customerId, paymentDetailsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deletePaymentDetailsCustomer");
      }
      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling deletePaymentDetailsCustomer");
      }

      let pathParams = {
        'customerId': customerId,'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods/{paymentDetailsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~getPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/PaymentDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch
     * Fetch the payment cards
     * @param {String} paymentDetailsId The id of the payment details
     * @param {module:BillaBear/api/PaymentDetailsApi~getPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPaymentDetails(paymentDetailsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling getPaymentDetails");
      }

      let pathParams = {
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentDetails;

      return this.apiClient.callApi(
        '/payment-methods/{paymentDetailsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listPaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~listPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer&#x27;s Payment Details
     * List all customers &lt;br&gt;&lt;br&gt;Added in version 1.1
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/PaymentDetailsApi~listPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listPaymentDetails(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listPaymentDetails");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the makeDefaultPaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~makeDefaultPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make Default
     * Delete Payment Details
     * @param {String} customerId The id of the customer to retrieve
     * @param {String} paymentDetailsId The id of the payment details
     * @param {module:BillaBear/api/PaymentDetailsApi~makeDefaultPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    makeDefaultPaymentDetails(customerId, paymentDetailsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling makeDefaultPaymentDetails");
      }
      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling makeDefaultPaymentDetails");
      }

      let pathParams = {
        'customerId': customerId,'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/payment-methods/{paymentDetailsId}/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the makeDefaultPaymentDetailsCustomer operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~makeDefaultPaymentDetailsCustomerCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make Default With Customer
     * Delete Payment Details
     * @param {String} customerId The id of the customer to retrieve
     * @param {String} paymentDetailsId The id of the payment details
     * @param {module:BillaBear/api/PaymentDetailsApi~makeDefaultPaymentDetailsCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    makeDefaultPaymentDetailsCustomer(customerId, paymentDetailsId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling makeDefaultPaymentDetailsCustomer");
      }
      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling makeDefaultPaymentDetailsCustomer");
      }

      let pathParams = {
        'customerId': customerId,'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods/{paymentDetailsId}/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the startFrontendPaymentDetails operation.
     * @callback moduleBillaBear/api/PaymentDetailsApi~startFrontendPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/FrontendToken{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Frontend Detail Collection
     * Start frontend payment details
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/PaymentDetailsApi~startFrontendPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    startFrontendPaymentDetails(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling startFrontendPaymentDetails");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontendToken;

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods/frontend-payment-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}