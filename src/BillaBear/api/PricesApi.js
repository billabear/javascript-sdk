/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineResponse20011 from '../model/InlineResponse20011';
import Price from '../model/Price';

/**
* Prices service.
* @module BillaBear/api/PricesApi
* @version 1.0.0
*/
export default class PricesApi {

    /**
    * Constructs a new PricesApi. 
    * @alias module:BillaBear/api/PricesApi
    * @class
    * @param {module:BillaBear/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BillaBear/ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPrice operation.
     * @callback moduleBillaBear/api/PricesApi~createPriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a price
     * @param {module:BillaBear/model/Price} body 
     * @param {String} productId The id of the product to retrieve
     * @param {module:BillaBear/api/PricesApi~createPriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPrice(body, productId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPrice");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling createPrice");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/{productId}/price', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listPrice operation.
     * @callback moduleBillaBear/api/PricesApi~listPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all prices
     * @param {String} productId The id of the product to retrieve
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {String} opts.lastKey The key to be used in pagination to say what the last key of the previous page was
     * @param {module:BillaBear/api/PricesApi~listPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listPrice(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling listPrice");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'limit': opts['limit'],'last_key': opts['lastKey']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/product/{productId}/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}