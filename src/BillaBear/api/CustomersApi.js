/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Customer from '../model/Customer';
import CustomerIdUasgelimitBody from '../model/CustomerIdUasgelimitBody';
import Error from '../model/Error';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse400 from '../model/InlineResponse400';
import SeatsAddBody from '../model/SeatsAddBody';
import SeatsRemoveBody from '../model/SeatsRemoveBody';
import UsageLimit from '../model/UsageLimit';
import VoucherCode from '../model/VoucherCode';

/**
* Customers service.
* @module BillaBear/api/CustomersApi
* @version 1.0.0
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:BillaBear/api/CustomersApi
    * @class
    * @param {module:BillaBear/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BillaBear/ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addSeatsSubscriptions operation.
     * @callback moduleBillaBear/api/CustomersApi~addSeatsSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Seats
     * Adds seats to a per seat subscription&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1.4&lt;/strong&gt;
     * @param {module:BillaBear/model/SeatsAddBody} body 
     * @param {String} subscriptionId The id of the subscription to retrieve
     * @param {module:BillaBear/api/CustomersApi~addSeatsSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addSeatsSubscriptions(body, subscriptionId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSeatsSubscriptions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling addSeatsSubscriptions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/subscription/{subscriptionId}/seats/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the applyVoucherToCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~applyVoucherToCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply voucher
     * Apply Voucher to Customer
     * @param {module:BillaBear/model/VoucherCode} body 
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~applyVoucherToCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applyVoucherToCustomer(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applyVoucherToCustomer");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling applyVoucherToCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer/{customerId}/voucher', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~createCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/Customer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a customer
     * @param {module:BillaBear/model/Customer} body 
     * @param {module:BillaBear/api/CustomersApi~createCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCustomer(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCustomer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Customer;

      return this.apiClient.callApi(
        '/customer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createCustomerUsageLimit operation.
     * @callback moduleBillaBear/api/CustomersApi~createCustomerUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/UsageLimit{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Usage Limit
     * Create Usage Limit for the custoemr
     * @param {module:BillaBear/model/CustomerIdUasgelimitBody} body 
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~createCustomerUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCustomerUsageLimit(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCustomerUsageLimit");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createCustomerUsageLimit");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsageLimit;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customerCustomerIdUasgeLimitLimitIdDelete operation.
     * @callback moduleBillaBear/api/CustomersApi~customerCustomerIdUasgeLimitLimitIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Usage Limit
     * Delete Usage Limit for the custoemr
     * @param {String} customerId The id of the customer to retrieve
     * @param {String} usageLimitId The id of the usage limit
     * @param {module:BillaBear/api/CustomersApi~customerCustomerIdUasgeLimitLimitIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCustomerIdUasgeLimitLimitIdDelete(customerId, usageLimitId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerCustomerIdUasgeLimitLimitIdDelete");
      }
      // verify the required parameter 'usageLimitId' is set
      if (usageLimitId === undefined || usageLimitId === null) {
        throw new Error("Missing the required parameter 'usageLimitId' when calling customerCustomerIdUasgeLimitLimitIdDelete");
      }

      let pathParams = {
        'customerId': customerId,'usageLimitId': usageLimitId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit/{limitId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the disableCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~disableCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Customer
     * Disable customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~disableCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableCustomer(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling disableCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer/{customerId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~enableCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Customer
     * Enable a customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~enableCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableCustomer(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling enableCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer/{customerId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getActiveForCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~getActiveForCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Active Subscriptions
     * List all Active customer subscriptions
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getActiveForCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getActiveForCustomer(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getActiveForCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/customer/{customerId}/subscription/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllCustomers operation.
     * @callback moduleBillaBear/api/CustomersApi~getAllCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all customers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {String} opts.lastKey The key to be used in pagination to say what the last key of the previous page was
     * @param {String} opts.email The email to search for
     * @param {String} opts.country The country code to search for
     * @param {String} opts.reference The reference to search for
     * @param {String} opts.externalReference The external reference to search for
     * @param {String} opts.companyName The company name to search for
     * @param {module:BillaBear/api/CustomersApi~getAllCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'limit': opts['limit'],'last_key': opts['lastKey'],'email': opts['email'],'country': opts['country'],'reference': opts['reference'],'external_reference': opts['externalReference'],'company_name': opts['companyName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerById operation.
     * @callback moduleBillaBear/api/CustomersApi~getCustomerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/Customer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detail
     * Info for a specific customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getCustomerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerById(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerById");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Customer;

      return this.apiClient.callApi(
        '/customer/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerCosts operation.
     * @callback moduleBillaBear/api/CustomersApi~getCustomerCostsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Usage Cost Estimate
     * The estimated costs from usage based billing for a customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getCustomerCostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerCosts(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCosts");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/customer/{customerId}/costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerLimitsById operation.
     * @callback moduleBillaBear/api/CustomersApi~getCustomerLimitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Customer Limits
     * Limits for a specific customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getCustomerLimitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerLimitsById(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerLimitsById");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/customer/{customerId}/limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerUsageLimitsById operation.
     * @callback moduleBillaBear/api/CustomersApi~getCustomerUsageLimitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Customer Usage Limits
     * Usage Limits for a specific customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getCustomerUsageLimitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerUsageLimitsById(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerUsageLimitsById");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getForCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~getForCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Subscriptions
     * List all customer subscriptions&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1&lt;/strong&gt;
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getForCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getForCustomer(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getForCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/customer/{customerId}/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoicesForCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~getInvoicesForCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Invoices
     * List Customer Invoices
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~getInvoicesForCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInvoicesForCustomer(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getInvoicesForCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/customer/{customerId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPaymentsForCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~getPaymentsForCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Payments
     * List Customer Payment
     * @param {String} customerId The id of the customer to retrieve
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {String} opts.lastKey The key to be used in pagination to say what the last key of the previous page was
     * @param {String} opts.name The name to search for
     * @param {module:BillaBear/api/CustomersApi~getPaymentsForCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPaymentsForCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getPaymentsForCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'limit': opts['limit'],'last_key': opts['lastKey'],'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/customer/{customerId}/payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRefundsForCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~getRefundsForCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer Refunds
     * List Customer Refund
     * @param {String} customerId The id of the customer to retrieve
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {String} opts.lastKey The key to be used in pagination to say what the last key of the previous page was
     * @param {String} opts.name The name to search for
     * @param {module:BillaBear/api/CustomersApi~getRefundsForCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRefundsForCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getRefundsForCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'limit': opts['limit'],'last_key': opts['lastKey'],'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/customer/{customerId}/refund', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listPaymentDetails operation.
     * @callback moduleBillaBear/api/CustomersApi~listPaymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Customer&#x27;s Payment Details
     * List all customers &lt;br&gt;&lt;br&gt;Added in version 1.1
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~listPaymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listPaymentDetails(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listPaymentDetails");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/customer/{customerId}/payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeSeatsSubscriptions operation.
     * @callback moduleBillaBear/api/CustomersApi~removeSeatsSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Seats
     * Remove seats to a per seat subscription&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1.4&lt;/strong&gt;
     * @param {module:BillaBear/model/SeatsRemoveBody} body 
     * @param {String} subscriptionId The id of the subscription to retrieve
     * @param {module:BillaBear/api/CustomersApi~removeSeatsSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeSeatsSubscriptions(body, subscriptionId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSeatsSubscriptions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling removeSeatsSubscriptions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/subscription/{subscriptionId}/seats/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback moduleBillaBear/api/CustomersApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/Customer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Update a customer
     * @param {module:BillaBear/model/Customer} body 
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/CustomersApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateCustomer(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCustomer");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Customer;

      return this.apiClient.callApi(
        '/customer/{customerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}