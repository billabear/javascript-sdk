/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CustomerIdUasgelimitBody from '../model/CustomerIdUasgelimitBody';
import Error from '../model/Error';
import Event from '../model/Event';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2005 from '../model/InlineResponse2005';
import UsageLimit from '../model/UsageLimit';

/**
* Usage service.
* @module BillaBear/api/UsageApi
* @version 1.0.0
*/
export default class UsageApi {

    /**
    * Constructs a new UsageApi. 
    * @alias module:BillaBear/api/UsageApi
    * @class
    * @param {module:BillaBear/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BillaBear/ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCustomerUsageLimit operation.
     * @callback moduleBillaBear/api/UsageApi~createCustomerUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/UsageLimit{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Usage Limit
     * Create Usage Limit for the custoemr
     * @param {module:BillaBear/model/CustomerIdUasgelimitBody} body 
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/UsageApi~createCustomerUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCustomerUsageLimit(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCustomerUsageLimit");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createCustomerUsageLimit");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsageLimit;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createEvent operation.
     * @callback moduleBillaBear/api/UsageApi~createEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Event
     * Creates an event that is used for usage billing
     * @param {module:BillaBear/model/Event} body 
     * @param {module:BillaBear/api/UsageApi~createEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEvent(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEvent");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customerCustomerIdUasgeLimitLimitIdDelete operation.
     * @callback moduleBillaBear/api/UsageApi~customerCustomerIdUasgeLimitLimitIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Usage Limit
     * Delete Usage Limit for the custoemr
     * @param {String} customerId The id of the customer to retrieve
     * @param {String} usageLimitId The id of the usage limit
     * @param {module:BillaBear/api/UsageApi~customerCustomerIdUasgeLimitLimitIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCustomerIdUasgeLimitLimitIdDelete(customerId, usageLimitId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerCustomerIdUasgeLimitLimitIdDelete");
      }
      // verify the required parameter 'usageLimitId' is set
      if (usageLimitId === undefined || usageLimitId === null) {
        throw new Error("Missing the required parameter 'usageLimitId' when calling customerCustomerIdUasgeLimitLimitIdDelete");
      }

      let pathParams = {
        'customerId': customerId,'usageLimitId': usageLimitId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit/{limitId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerCosts operation.
     * @callback moduleBillaBear/api/UsageApi~getCustomerCostsCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Usage Cost Estimate
     * The estimated costs from usage based billing for a customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/UsageApi~getCustomerCostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerCosts(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCosts");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/customer/{customerId}/costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCustomerUsageLimitsById operation.
     * @callback moduleBillaBear/api/UsageApi~getCustomerUsageLimitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:BillaBear/model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Customer Usage Limits
     * Usage Limits for a specific customer
     * @param {String} customerId The id of the customer to retrieve
     * @param {module:BillaBear/api/UsageApi~getCustomerUsageLimitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCustomerUsageLimitsById(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerUsageLimitsById");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/customer/{customerId}/uasge-limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}